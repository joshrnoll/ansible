- hosts: docker
  become: yes
  tasks:
    
    # Verify node is ubuntu and determine whether docker is already installed
    - name: Verify node is an ubuntu node
      fail:
        msg: Node {{ ansible_facts['nodename'] }} is not an ubuntu node. Remove {{ ansible_facts['nodename'] }} from docker group in hosts.ini before re-running playbook
      when: ansible_facts['lsb']['id'] != "Ubuntu"
    
    - name: Verify docker installation
      ansible.builtin.shell: docker --version
      register: docker_installed
      changed_when: "docker_installed.rc != 0"
      ignore_errors: true
    
    - block:

      # Prerequisites
      - name: Update apt cache and upgrade all packages
        apt: 
          update_cache: true 
          cache_valid_time: 3600
          upgrade: safe

      - name: Install dependencies
        apt:
          name: "{{ packages }}"
          state: present
          update_cache: yes
        vars:
          packages:
            - apt-transport-https
            - ca-certificates
            - curl
            - software-properties-common
            - gnupg

      # DOCKER INSTALLATION
      - name: Ensure /etc/apt/keyrings exists
        file:
          path: /etc/apt/keyrings
          state: directory
          mode: '0775'

      - name: Download signing key for Docker
        get_url:
          url: https://download.docker.com/linux/ubuntu/gpg
          dest: /etc/apt/keyrings/docker.asc

      - name: Add apt repository for stable version
        apt_repository:
          repo: "deb [arch=amd64 signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu {{ ansible_facts['lsb']['codename'] }} stable"
          state: present
          filename: docker
        register: repo_added
        when: ansible_facts['machine'] == "x86_64"
      
      - name: Update apt cache 
        apt: 
          update_cache: true 
        when: repo_added.changed
      
      - name: Install Docker
        apt:
          name: "{{ packages }}"
          state: present
          update_cache: yes
        vars:
          packages:
            - docker-ce
            - docker-ce-cli
            - containerd.io
            - docker-buildx-plugin
            - docker-compose-plugin

      - name: Add user to docker group
        user:
          name: "{{ ansible_user }}"
          group: docker

      # REQUIRED PACKAGES FOR USING ANSIBLE DOCKER (for portainer installation below)
      - name: Install related Ubuntu packages
        apt:
          name: "{{ packages }}"
          state: latest
        vars:
          packages:
            - python3-pip
            - mc

      - name: Install python packages
        pip:
          name: docker

      when: docker_installed.changed
    
    # Meta task does not support 'when' conditional. Connection will be reset every time.
    - name: Reset connection to allow user changes to take effect
      meta: reset_connection

    - name: Deploy tailscale sidecar container
      include_role:
        name: ../../roles/tailscale_sidecar
      vars:
        service_name: portainer-{{ ansible_facts['nodename'] }}
        authkey: "{{ oauth_key['tailscale'] }}"
        serve_port: 9443
        https_container: true

    # https://docs.ansible.com/ansible/latest/collections/community/docker/docker_container_module.html#ansible-collections-community-docker-docker-container-module
    - name: Create portainer container
      become: no
      docker_container:
        name: portainer-{{ ansible_facts['nodename'] }}
        image: portainer/portainer-ce
        state: started
        restart_policy: unless-stopped
        volumes:
          - /var/run/docker.sock:/var/run/docker.sock
          - portainer_data:/data
        network_mode: container:ts-portainer-{{ ansible_facts['nodename'] }}