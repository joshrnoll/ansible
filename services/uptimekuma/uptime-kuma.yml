---
# TODO -- Modify to use specific version tag (rather than latest)
- name: Install and Configure {{ service_name }}
  hosts: uptimekuma
  user: josh
  vars:
    service_name: uptime-kuma
    image_name: louislam/uptime-kuma
    image_tag: latest

  tasks:  
    - name: Ensure {{ service_name }} directory exists
      ansible.builtin.file:
        path: /home/{{ ansible_user }}/{{ service_name }}
        state: directory
    
    - name: Ensure {{ service_name }}'s tailscale serve directory exists
      ansible.builtin.file:
        path: /home/{{ ansible_user }}/{{ service_name }}/ts-serve-config
        state: directory

    - name: Copy tailscale serve config file to server
      copy:
        src: ./{{ service_name }}.json
        dest: /home/{{ ansible_user }}/{{ service_name }}/ts-serve-config/{{ service_name }}.json
        force: true
    
    - name: Include tailscale keyfile
      include_vars: tailscale_oauth_key.yml

    - name: Verify docker installation
      ansible.builtin.shell: docker --version
      register: docker_installed
      ignore_errors: true
    
    - block:
      - name: Pull image and deploy {{ service_name }}'s tailscale container
        docker_container:
          name: ts-{{ service_name }}
          image: tailscale/tailscale:latest
          hostname: "{{ service_name }}"
          restart_policy: unless-stopped
          env:
            TS_AUTHKEY: "{{ oauth_key['tailscale'] }}?ephemeral=false"
            TS_STATE_DIR: /var/lib/tailscale
            TS_EXTRA_ARGS: --advertise-tags=tag:containers
            TS_SERVE_CONFIG: /config/uptime-kuma.json
          volumes:
            - ~/{{ service_name }}/tailscale:/var/lib/tailscale
            - ~/{{ service_name }}/ts-serve-config:/config
            - /dev/net/tun:/dev/net/tun
          capabilities:
            - net_admin
            - sys_module

      - name: Pull image and deploy {{ service_name }} container
        docker_container:
          name: "{{ service_name }}"
          image: "{{ image_name }}:{{ image_tag }}"
          state: started
          restart_policy: unless-stopped
          volumes: ~/{{ service_name }}/app:/app/data
          # Ports do not need to be published when sharing network mode with another container (tailscale)
          # published_ports:
          #   - "3001:3001"  # <Host Port>:<Container Port>
          network_mode: container:ts-{{ service_name }}

      # Firewall ports don't need to be opened with tailscale config
      #
      # - name: Open firewall ports
      #   become: yes
      #   ufw:
      #     state: enabled
      #     rule: allow
      #     port: "3001"
      #     proto: any
      when: not docker_installed.failed 
...
