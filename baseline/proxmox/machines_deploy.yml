---
- name: Deploy desired VMs on Proxmox cluster
  hosts: proxmox
  serial: 1
  user: root
  
  tasks:

    - name: Create VMs from machines_deploy_vars.yml
      throttle: 1
      community.general.proxmox_kvm:
        # Credentials and host/node to work from
        node: "{{ item.node }}"
        api_user: "{{ proxmox_username }}"
        api_token_id: "{{ proxmox_token_id }}"
        api_token_secret: "{{ proxmox_token_secret }}"
        api_host: "{{ ansible_facts['vmbr0.7']['ipv4']['address'] }}"

        # Basic VM info
        vmid: "{{ item.vmid }}"
        name: "{{ item.name }}"
        ostype: "{{ item.ostype }}" # See https://docs.ansible.com/ansible/latest/collections/community/general/proxmox_kvm_module.html
        
        # Hardware info
        memory: "{{ item.memory }}"
        cores: "{{ item.cores }}"
        scsihw: virtio-scsi-pci
        ide:
          ide2: '{{ item.storage }}:cloudinit,format=qcow2'
        serial: 
          serial0: socket
        vga: serial0
        boot: order=scsi0;ide2
        
        ## TODO - Find a way to specify number of interfaces in vars
        # Storage and network info
        net:
          net0: 'virtio,bridge=vmbr0,tag={{ item.vlan }}'
        ipconfig:
          ipconfig0: 'ip={{ item.ip_address }},gw={{ item.gateway }}'
        nameservers: "{{ item.nameservers }}"
        
        # Cloud-init info
        ciuser: "{{ ciuser }}"
        cipassword: "{{ cipassword }}"
        sshkeys: "{{ lookup('file', lookup('env','HOME') + '/.ssh/id_rsa.pub') }}"
        
        # Desired state
        state: present
      ignore_errors: true

      # Loop through desired machines in machines_deploy_vars.yml
      loop: "{{ machines_deploy }}"
    
    # Resize boot disk
    - name: Import cloud-init disk from corresponding template
      community.general.proxmox_disk:
        api_user: "{{ proxmox_username }}"
        api_token_id: "{{ proxmox_token_id }}"
        api_token_secret: "{{ proxmox_token_secret }}"
        api_host: "{{ ansible_facts['vmbr0.7']['ipv4']['address'] }}"
        vmid: "{{ item.vmid }}"
        disk: scsi0
        size: "{{ item.disk_size }}"
        storage: "{{ item.storage }}"
        state: resized
      loop: "{{ machines_deploy }}"
    
    - name: Import cloud init drive and power VMs on
      include_tasks: machines_bootstrap.yml
      loop: "{{ machines_deploy }}"

    # - name: Delete any desired VMs
    #   include_tasks: machines_delete.yml
    #   loop: "{{ machines_delete }}"
    
    # - name: Make changes and restart as necessary
    #   include_tasks: machines_change.yml
    #   loop: "{{ machines_change }}"